# Docker Compose for nerf-edge-kit development environment
# Usage: docker-compose up -d

version: '3.8'

services:
  # Web development server
  web-dev:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"    # Webpack dev server
      - "8080:8080"    # Alternative port
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    command: npm run dev

  # Python training environment
  python-dev:
    build:
      context: .
      target: python-env
    ports:
      - "8000:8000"    # Python API server
      - "6006:6006"    # TensorBoard
    volumes:
      - ./python:/python
      - ./data:/data
      - ./models:/models
    environment:
      - PYTHONPATH=/python
      - CUDA_VISIBLE_DEVICES=0
    command: python -m nerf_edge_kit.train --config /python/configs/default.yaml

  # Database for storing training metadata
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: nerf_edge_kit
      POSTGRES_USER: nerf_user
      POSTGRES_PASSWORD: nerf_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web-dev
      - python-dev
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: nerf-edge-kit-network