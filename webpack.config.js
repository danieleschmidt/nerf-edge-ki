const path = require('path');\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\nconst CompressionPlugin = require('compression-webpack-plugin');\n\nconst isProduction = process.env.NODE_ENV === 'production';\nconst isDevelopment = !isProduction;\n\nmodule.exports = {\n  mode: isProduction ? 'production' : 'development',\n  \n  entry: {\n    main: './src/index.ts',\n    worker: './src/workers/NerfWorker.ts'\n  },\n  \n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: isProduction ? '[name].[contenthash].js' : '[name].js',\n    chunkFilename: isProduction ? '[name].[contenthash].chunk.js' : '[name].chunk.js',\n    assetModuleFilename: 'assets/[name].[contenthash][ext]',\n    clean: true,\n    publicPath: '/'\n  },\n  \n  resolve: {\n    extensions: ['.ts', '.js', '.wasm'],\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n      '@core': path.resolve(__dirname, 'src/core'),\n      '@services': path.resolve(__dirname, 'src/services'),\n      '@rendering': path.resolve(__dirname, 'src/rendering'),\n      '@utils': path.resolve(__dirname, 'src/utils')\n    },\n    fallback: {\n      // WebGPU and browser APIs don't need Node.js polyfills\n      'fs': false,\n      'path': false,\n      'crypto': false\n    }\n  },\n  \n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              transpileOnly: isDevelopment,\n              compilerOptions: {\n                module: 'esnext',\n                target: 'es2020'\n              }\n            }\n          }\n        ],\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          isProduction ? MiniCssExtractPlugin.loader : 'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              modules: {\n                auto: true,\n                localIdentName: isProduction ? '[hash:base64:5]' : '[name]__[local]--[hash:base64:5]'\n              }\n            }\n          },\n          'postcss-loader'\n        ]\n      },\n      {\n        test: /\\.(png|jpg|jpeg|gif|svg|ico)$/,\n        type: 'asset',\n        parser: {\n          dataUrlCondition: {\n            maxSize: 8 * 1024 // 8kb\n          }\n        }\n      },\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/,\n        type: 'asset/resource'\n      },\n      {\n        test: /\\.wasm$/,\n        type: 'asset/resource'\n      },\n      {\n        test: /\\.glsl$/,\n        type: 'asset/source'\n      }\n    ]\n  },\n  \n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development'),\n      'process.env.VERSION': JSON.stringify(require('./package.json').version),\n      '__DEV__': isDevelopment,\n      '__PROD__': isProduction\n    }),\n    \n    new HtmlWebpackPlugin({\n      template: './web/index.html',\n      title: 'NeRF Edge Kit',\n      inject: 'body',\n      scriptLoading: 'defer',\n      minify: isProduction ? {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeRedundantAttributes: true,\n        useShortDoctype: true,\n        removeEmptyAttributes: true,\n        removeStyleLinkTypeAttributes: true,\n        keepClosingSlash: true,\n        minifyJS: true,\n        minifyCSS: true,\n        minifyURLs: true\n      } : false\n    }),\n    \n    ...(isProduction ? [\n      new MiniCssExtractPlugin({\n        filename: '[name].[contenthash].css',\n        chunkFilename: '[name].[contenthash].chunk.css'\n      }),\n      \n      new CompressionPlugin({\n        algorithm: 'gzip',\n        test: /\\.(js|css|html|svg)$/,\n        threshold: 8192,\n        minRatio: 0.8\n      }),\n      \n      new CompressionPlugin({\n        filename: '[path][base].br',\n        algorithm: 'brotliCompress',\n        test: /\\.(js|css|html|svg)$/,\n        compressionOptions: {\n          level: 11\n        },\n        threshold: 8192,\n        minRatio: 0.8\n      }),\n      \n      ...(process.env.ANALYZE_BUNDLE ? [new BundleAnalyzerPlugin()] : [])\n      \n    ] : [\n      new webpack.HotModuleReplacementPlugin()\n    ])\n  ],\n  \n  optimization: {\n    minimize: isProduction,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            drop_console: isProduction,\n            drop_debugger: isProduction,\n            pure_funcs: isProduction ? ['console.log', 'console.info'] : []\n          },\n          mangle: {\n            safari10: true\n          },\n          format: {\n            comments: false\n          }\n        },\n        extractComments: false\n      }),\n      new CssMinimizerPlugin()\n    ],\n    \n    splitChunks: {\n      chunks: 'all',\n      cacheGroups: {\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true\n        },\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: 'vendors',\n          priority: -10,\n          chunks: 'all'\n        },\n        webgpu: {\n          test: /[\\\\/]src[\\\\/]rendering[\\\\/]/,\n          name: 'webgpu',\n          priority: 10,\n          chunks: 'all'\n        },\n        nerf: {\n          test: /[\\\\/]src[\\\\/](core|services)[\\\\/]/,\n          name: 'nerf-core',\n          priority: 5,\n          chunks: 'all'\n        }\n      }\n    },\n    \n    runtimeChunk: {\n      name: 'runtime'\n    },\n    \n    moduleIds: 'deterministic',\n    chunkIds: 'deterministic'\n  },\n  \n  devtool: isDevelopment ? 'eval-source-map' : 'source-map',\n  \n  devServer: {\n    port: 3000,\n    host: '0.0.0.0',\n    hot: true,\n    open: true,\n    compress: true,\n    historyApiFallback: true,\n    static: {\n      directory: path.join(__dirname, 'web/public'),\n      publicPath: '/public'\n    },\n    headers: {\n      'Cross-Origin-Opener-Policy': 'same-origin',\n      'Cross-Origin-Embedder-Policy': 'require-corp',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',\n      'Access-Control-Allow-Headers': 'X-Requested-With, content-type, Authorization'\n    },\n    client: {\n      logging: 'info',\n      overlay: {\n        errors: true,\n        warnings: false\n      },\n      progress: true\n    }\n  },\n  \n  performance: {\n    hints: isProduction ? 'warning' : false,\n    maxEntrypointSize: 512000, // 500KB\n    maxAssetSize: 512000\n  },\n  \n  stats: {\n    preset: 'minimal',\n    moduleTrace: true,\n    errorDetails: true\n  },\n  \n  experiments: {\n    asyncWebAssembly: true,\n    topLevelAwait: true\n  },\n  \n  cache: {\n    type: 'filesystem',\n    buildDependencies: {\n      config: [__filename]\n    }\n  }\n};