# Main CI Pipeline - Complete Example
# Place this file at: .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Web/TypeScript testing
  test-web:
    name: Web Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript compiler
        run: npm run typecheck

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run coverage tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: web
          name: codecov-web

      - name: Build web application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  # Python/ML testing
  test-python:
    name: Python Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run flake8 linting
        run: flake8 python/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run black formatting check
        run: black --check python/

      - name: Run mypy type checking
        run: mypy python/

      - name: Run unit tests
        run: python -m pytest python/tests/unit/ -v --cov-report=xml --cov=nerf_edge_kit

      - name: Run integration tests
        run: python -m pytest python/tests/integration/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python
          name: codecov-python

      - name: Build Python package
        run: |
          pip install build
          python -m build

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ matrix.python-version }}
          path: dist/
          retention-days: 7

  # iOS testing (requires macOS runner)
  test-ios:
    name: iOS Tests
    runs-on: macos-13
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Cache iOS dependencies
        uses: actions/cache@v3
        with:
          path: ios/build
          key: ${{ runner.os }}-ios-build-${{ hashFiles('ios/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-ios-build-

      - name: Build iOS framework
        run: |
          xcodebuild -project ios/NerfEdgeKit.xcodeproj \
                     -scheme NerfEdgeKit \
                     -configuration Debug \
                     -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
                     -quiet \
                     build

      - name: Run iOS unit tests
        run: |
          xcodebuild test \
                     -project ios/NerfEdgeKit.xcodeproj \
                     -scheme NerfEdgeKitTests \
                     -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
                     -enableCodeCoverage YES \
                     -quiet

      - name: Upload iOS test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results
          path: ios/build/Build/Products/Debug-iphonesimulator/
          retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm audit --audit-level high
        continue-on-error: true

      - name: Run Python security scan with safety
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            safety-report.json
          retention-days: 30

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: npm run test:perf

      - name: Upload benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'jsben'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: ${{ github.ref == 'refs/heads/main' }}
          comment-on-alert: true
          alert-threshold: '200%'

  # Docker build and security scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [test-web, test-python]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production-web
          tags: nerf-edge-kit:latest
          outputs: type=docker,dest=/tmp/nerf-edge-kit.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          input: '/tmp/nerf-edge-kit.tar'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  # Code quality analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-web, test-python, test-ios, security-scan, performance, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Validate deployment readiness
        run: |
          echo "âœ… All tests passed"
          echo "âœ… Security scans completed"
          echo "âœ… Performance benchmarks completed"
          echo "âœ… Docker image built successfully"
          echo "ðŸš€ Ready for deployment"

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 'latest',
              state: 'success',
              description: 'All CI checks passed - ready for deployment',
              environment: 'production'
            });

  # Notification on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-web, test-python, test-ios, security-scan, performance, docker-build]
    if: failure()
    
    steps:
      - name: Notify Slack on failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#engineering'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸš¨ CI Pipeline Failed ðŸš¨
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the failed jobs and fix the issues.