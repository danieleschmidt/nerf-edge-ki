# Automated Release Pipeline - Complete Example
# Place this file at: .github/workflows/release.yml

name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Determine if a release should be created
  check-release:
    name: Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.semantic_release.outputs.new_release_published }}
      new_version: ${{ steps.semantic_release.outputs.new_release_version }}
      release_notes: ${{ steps.semantic_release.outputs.new_release_notes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic release (dry run)
        id: semantic_release
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          semantic_version: 21
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build all release artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine wheel

      - name: Run all tests
        run: |
          npm run test
          python -m pytest

      - name: Build web application
        run: npm run build

      - name: Build Python package
        run: python -m build

      - name: Generate documentation
        run: |
          npm run docs:build
          pip install sphinx
          cd docs && make html

      - name: Create tarball
        run: |
          tar -czf nerf-edge-kit-${{ needs.check-release.outputs.new_version }}.tar.gz \
            dist/ \
            python/dist/ \
            docs/_build/html \
            README.md \
            LICENSE \
            CHANGELOG.md

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
            python/dist/
            docs/_build/html/
            nerf-edge-kit-*.tar.gz
          retention-days: 30

  # Build iOS framework
  build-ios:
    name: Build iOS Framework
    runs-on: macos-13
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer

      - name: Build iOS framework
        run: |
          xcodebuild -project ios/NerfEdgeKit.xcodeproj \
                     -scheme NerfEdgeKit \
                     -configuration Release \
                     -archivePath NerfEdgeKit.xcarchive \
                     archive

      - name: Create XCFramework
        run: |
          xcodebuild -create-xcframework \
                     -archive NerfEdgeKit.xcarchive \
                     -framework NerfEdgeKit.framework \
                     -output NerfEdgeKit.xcframework

      - name: Create iOS package
        run: |
          zip -r NerfEdgeKit-${{ needs.check-release.outputs.new_version }}.xcframework.zip \
            NerfEdgeKit.xcframework

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-framework
          path: |
            NerfEdgeKit.xcframework.zip
            NerfEdgeKit.xcarchive/
          retention-days: 30

  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [check-release, build-artifacts]
    if: needs.check-release.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            ${{ secrets.DOCKERHUB_USERNAME }}/nerf-edge-kit
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ needs.check-release.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.check-release.outputs.new_version }}
            type=semver,pattern={{major}},value=${{ needs.check-release.outputs.new_version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production-web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production-api
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-api:${{ needs.check-release.outputs.new_version }}
            ghcr.io/${{ github.repository }}-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/nerf-edge-kit-api:${{ needs.check-release.outputs.new_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/nerf-edge-kit-api:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Run security scans on release artifacts
  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [build-artifacts, build-docker]
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Run Trivy scan on Docker images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'sarif'
          output: 'docker-security-results.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'docker-security-results.sarif'

  # Create the actual release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-release, build-artifacts, build-ios, build-docker, security-scan]
    if: needs.check-release.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Run semantic release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 21
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.check-release.outputs.new_version }}
          name: Release v${{ needs.check-release.outputs.new_version }}
          body: ${{ needs.check-release.outputs.release_notes }}
          artifacts: |
            release-artifacts/nerf-edge-kit-*.tar.gz
            ios-framework/NerfEdgeKit-*.xcframework.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

  # Publish packages
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Install Node.js dependencies
        run: npm ci

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish to PyPI
        run: |
          python -m twine upload python/dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [publish-packages]
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          
      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add your smoke test commands here

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🎉 New Release Deployed! 🎉
            Version: v${{ needs.check-release.outputs.new_version }}
            Environment: Staging
            
            📦 Packages Published:
            - NPM: https://www.npmjs.com/package/nerf-edge-kit
            - PyPI: https://pypi.org/project/nerf-edge-kit/
            - Docker: ghcr.io/${{ github.repository }}:latest
            
            🔗 Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/latest