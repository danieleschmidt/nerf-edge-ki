version: '3.8'

services:
  nerf-edge-kit:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        BUILD_TARGET: production
        BUILDKIT_INLINE_CACHE: 1
      cache_from:
        - nerf-edge-kit:builder
        - nerf-edge-kit:production
    image: nerf-edge-kit:production
    container_name: nerf-edge-kit-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8443:8443"
      - "9090:9090"  # Metrics endpoint
      - "9091:9091"  # Health metrics
    environment:
      - NODE_ENV=production
      - PORT=8080
      - HTTPS_PORT=8443
      - ENABLE_HTTPS=true
      - GPU_ACCELERATION=enabled
      - WEBGPU_BACKEND=vulkan
      - MEMORY_POOL_SIZE=4096
      - MAX_CONCURRENT_RENDERS=12
      - FOVEATED_RENDERING=enabled
      - NEURAL_COMPRESSION=enabled
      - SPATIAL_SYNC_ENABLED=true
      - QUANTUM_OPTIMIZATION=enabled
      - SECURITY_SCANNING=enabled
      - COMPLIANCE_VALIDATION=enabled
      - MULTI_USER_SUPPORT=enabled
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_METRICS_ENABLED=true
    env_file:
      - .env.production
    volumes:
      - ./ssl:/app/ssl:ro
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./models:/app/models
      - ./uploads:/app/uploads
      - /dev/dri:/dev/dri  # GPU device access
    networks:
      - nerf-network
    healthcheck:
      test: ["CMD", "node", "/app/health-check.js"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - redis
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nerf.rule=Host(`nerf.your-domain.com`)"
      - "traefik.http.routers.nerf.entrypoints=websecure"
      - "traefik.http.routers.nerf.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nerf.middlewares=nerf-auth,nerf-compress"
      - "traefik.http.middlewares.nerf-auth.basicauth.users=admin:$$2y$$10$$..."
      - "traefik.http.middlewares.nerf-compress.compress=true"

  nginx:
    image: nginx:alpine
    container_name: nerf-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - nerf-edge-kit
    networks:
      - nerf-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: nerf-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - nerf-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus
    container_name: nerf-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - nerf-network

  grafana:
    image: grafana/grafana
    container_name: nerf-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your-secure-password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - nerf-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  nerf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16